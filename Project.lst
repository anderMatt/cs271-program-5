Microsoft (R) Macro Assembler Version 14.12.25831.0	    03/01/18 20:13:02
Program 5     (program5.asm				     Page 1 - 1


				TITLE Program 5     (program5.asm)

				; Author: Matthew Anderson
				; CS 271 - Program 5                 Date: February 26, 2018
				; Description:

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert constant definitions here)

 = 0000000A			MIN_SAMPLE_SIZE = 10
 = 000000C8			MAX_SAMPLE_SIZE = 200
 = 00000064			RANGE_MIN = 100
 = 000003E7			RANGE_MAX = 999

 00000000			.data

				; (insert variable definitions here)
 00000000 52 61 6E 64 6F	progTitle		BYTE	"Random Number Generator", 0
	   6D 20 4E 75 6D
	   62 65 72 20 47
	   65 6E 65 72 61
	   74 6F 72 00
 00000018 57 72 69 74 74	myName			BYTE	"Written By: Matthew Anderson",0
	   65 6E 20 42 79
	   3A 20 4D 61 74
	   74 68 65 77 20
	   41 6E 64 65 72
	   73 6F 6E 00
 00000035 49 20 77 69 6C	instructions1	BYTE	"I will generate N random numbers in [100, 999], where",0
	   6C 20 67 65 6E
	   65 72 61 74 65
	   20 4E 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 20 69 6E
	   20 5B 31 30 30
	   2C 20 39 39 39
	   5D 2C 20 77 68
	   65 72 65 00
 0000006B 4E 20 69 73 20	instructions2	BYTE	"N is a number of your choice in [10, 200]. Then, I will ",0
	   61 20 6E 75 6D
	   62 65 72 20 6F
	   66 20 79 6F 75
	   72 20 63 68 6F
	   69 63 65 20 69
	   6E 20 5B 31 30
	   2C 20 32 30 30
	   5D 2E 20 54 68
	   65 6E 2C 20 49
	   20 77 69 6C 6C
	   20 00
 000000A4 64 69 73 70 6C	instructions3	BYTE	"display the generated numbers, their median, and sort them in",0
	   61 79 20 74 68
	   65 20 67 65 6E
	   65 72 61 74 65
	   64 20 6E 75 6D
	   62 65 72 73 2C
	   20 74 68 65 69
	   72 20 6D 65 64
	   69 61 6E 2C 20
	   61 6E 64 20 73
	   6F 72 74 20 74
	   68 65 6D 20 69
	   6E 00
 000000E2 64 65 73 63 65	instructions4	BYTE	"descending order.",0
	   6E 64 69 6E 67
	   20 6F 72 64 65
	   72 2E 00

 000000F4 45 6E 74 65 72	dataPrompt		BYTE	"Enter sample size in [10, 200]: ",0
	   20 73 61 6D 70
	   6C 65 20 73 69
	   7A 65 20 69 6E
	   20 5B 31 30 2C
	   20 32 30 30 5D
	   3A 20 00
 00000115 56 61 6C 75 65	dataErr			BYTE	"Value must be in in [10, 200]! Try again: ",0
	   20 6D 75 73 74
	   20 62 65 20 69
	   6E 20 69 6E 20
	   5B 31 30 2C 20
	   32 30 30 5D 21
	   20 54 72 79 20
	   61 67 61 69 6E
	   3A 20 00

 00000140 55 6E 73 6F 72	unsorted		BYTE	"Unsorted Array: ",0
	   74 65 64 20 41
	   72 72 61 79 3A
	   20 00
 00000151 53 6F 72 74 65	sorted			BYTE	"Sorted Array (descending): ",0
	   64 20 41 72 72
	   61 79 20 28 64
	   65 73 63 65 6E
	   64 69 6E 67 29
	   3A 20 00
 0000016D 20 20 00		gutter			BYTE	"  ",0

 00000170 00000000		sampleSize		DWORD	?			;how many random numbers to generate. User-entered value.
 00000174  000000C8 [		sampleArr		DWORD	200 DUP(?)
	    00000000
	   ]

				;-----------------------------------------------------------------------------------------
				;FOR TESTING THE MEDIAN
				;-----------------------------------------------------------------------------------------
 00000494 00000000		theMedian		DWORD ?
 00000498 54 68 65 20 6D	medianStr		BYTE "The median is: ",0
	   65 64 69 61 6E
	   20 69 73 3A 20
	   00
				;-----------------------------------------------------------------------------------------


 00000000			.code
 00000000			main PROC
 00000000  E8 00000000 E		call	Randomize				;Seed random generator.
 00000005  E8 0000008E			call	Introduction
 0000000A  68 00000170 R		push	OFFSET sampleSize		;Pass sample size to GetData.
 0000000F  E8 000000DF			call	GetData
 00000014  68 00000174 R		push	OFFSET sampleArr		;Pass array and size to FillArray.
 00000019  FF 35 00000170 R		push	sampleSize
 0000001F  E8 00000119			call	FillArray

 00000024  68 00000174 R		push	OFFSET sampleArr
 00000029  FF 35 00000170 R		push	sampleSize
 0000002F  68 00000140 R		push	OFFSET unsorted
 00000034  E8 0000012D			call	Display

 00000039  68 00000174 R		push	OFFSET sampleArr
 0000003E  FF 35 00000170 R		push	sampleSize
 00000044  E8 0000017C			call	SortArray

 00000049  68 00000174 R		push	OFFSET sampleArr
 0000004E  FF 35 00000170 R		push	sampleSize
 00000054  68 00000151 R		push	OFFSET sorted
 00000059  E8 00000108			call	Display

					;TESTING MEDIAN
 0000005E  E8 00000000 E		call	CrLf
 00000063  68 00000174 R		push	OFFSET sampleArr
 00000068  FF 35 00000170 R		push	sampleSize
 0000006E  68 00000494 R		push	OFFSET theMedian
 00000073  E8 000001AB			call	GetMedian

 00000078  BA 00000498 R		mov		edx, OFFSET medianStr
 0000007D  E8 00000000 E		call	WriteString
 00000082  A1 00000494 R		mov		eax, theMedian
 00000087  E8 00000000 E		call	WriteDec
 0000008C  E8 00000000 E		call	CrLf
					
					;DONE TESTING MEDIAN

					;------------------------------
					;TEST SWAPPING FIRST AND SECOND ARRAY ELEMENTS.
					;------------------------------
					;push	OFFSET sampleArr
					;mov		eax, OFFSET sampleArr
					;add		eax, 4
					;push	eax
					;call	Swap
					
					;push	OFFSET sampleArr
					;push	sampleSize
					;push	OFFSET sorted
					;call	Display
					;------------------------------
					;------------------------------


					exit	; exit to operating system
 00000091  6A 00	   *	    push   +000000000h
 00000093  E8 00000000 E   *	    call   ExitProcess
 00000098			main ENDP

				;--------------------------------------------------
 00000098			Introduction PROC
				;
				; Prints a greeting message and
				; instructions.
				;
				;--------------------------------------------------
 00000098  BA 00000000 R		mov		edx, OFFSET progTitle
 0000009D  E8 00000000 E		call	WriteString
 000000A2  E8 00000000 E		call	CrLf
 000000A7  BA 00000018 R		mov		edx, OFFSET myName
 000000AC  E8 00000000 E		call	WriteString
 000000B1  E8 00000000 E		call	CrLf
 000000B6  BA 00000035 R		mov		edx, OFFSET instructions1
 000000BB  E8 00000000 E		call	WriteString
 000000C0  E8 00000000 E		call	CrLf
 000000C5  BA 0000006B R		mov		edx, OFFSET instructions2
 000000CA  E8 00000000 E		call	WriteString
 000000CF  E8 00000000 E		call	CrLf
 000000D4  BA 000000A4 R		mov		edx, OFFSET instructions3
 000000D9  E8 00000000 E		call	WriteString
 000000DE  E8 00000000 E		call	CrLf
 000000E3  BA 000000E2 R		mov		edx, OFFSET instructions4
 000000E8  E8 00000000 E		call	WriteString
 000000ED  E8 00000000 E		call	CrLf
 000000F2  C3				ret

 000000F3			Introduction ENDP

				;--------------------------------------------------
 000000F3			GetData PROC
				;
				; Prompts user to enter a number N in 
				; [MIN_SAMPLE_SIZE, MAX_SAMPLE_SIZE]. If input is 
				; outside of this range, prints error message and
				; prompts again.
				;
				; Receives: Address of output variable on system stack.
				; Returns: Output variable contains N.
				;--------------------------------------------------
 000000F3  55				push	ebp
 000000F4  8B EC			mov		ebp, esp
 000000F6  8B 75 08			mov		esi, [ebp + 8]		;ESI contains address of output variable.

					; Prompt input.
 000000F9  BA 000000F4 R		mov		edx, OFFSET dataPrompt
 000000FE  E8 00000000 E		call	WriteString

 00000103			getNum:
 00000103  E8 00000000 E		call	ReadInt
 00000108  E8 0000001E			call	IsValidSampleSize
 0000010D  74 11			jz		isValid

					;Input was not valid. Print error, and try again.
 0000010F  BA 00000115 R		mov		edx, OFFSET dataErr
 00000114  E8 00000000 E		call	CrLf
 00000119  E8 00000000 E		call	WriteString
 0000011E  EB E3			jmp		getNum

 00000120			isValid:
 00000120  E8 00000000 E		call	CrLf
 00000125  89 06			mov		[esi], eax		;Place entered number in output variable.
 00000127  5D				pop		ebp
 00000128  C2 0004			ret 4					;Remove output variable from stack.

 0000012B			GetData ENDP

				;--------------------------------------------------
 0000012B			IsValidSampleSize PROC
				;
				; Validates user-entered sample size to be within
				; [MIN_SAMPLE_SIZE, MAX_SAMPLE_SIZE].
				;
				; Receives: EAX = user-entered sample size.
				; Returns: ZF = 1 if sample size is in the valid
				; range; else ZF = 0.
				;--------------------------------------------------
 0000012B  83 F8 0A			cmp		eax, MIN_SAMPLE_SIZE
 0000012E  7C 0C			jl		invalid 
 00000130  3D 000000C8			cmp		eax, MAX_SAMPLE_SIZE
 00000135  7F 05			jg		invalid 
 00000137  A9 00000000			test	eax, 0		;Input is valid. Unset ZF.

 0000013C			invalid:
 0000013C  C3				ret

 0000013D			IsValidSampleSize ENDP

				;--------------------------------------------------
 0000013D			FillArray PROC
				;
				; Fills an array with N random numbers, each in
				; the range [100, 999].
				;
				; Receives stack parameters (A, N):
				;	A: address of the array to fill.
				;   N: random number sample size.
				;
				; Returns: A[0...N-1] contains random numbers.
				;--------------------------------------------------
 0000013D  55				push	ebp
 0000013E  8B EC			mov		ebp, esp
 00000140  8B 7D 0C			mov		edi, [ebp + 12]		;Load address of output array.
 00000143  8B 4D 08			mov		ecx, [ebp + 8]		;Load sample size.

 00000146			putNext:						;Loads next element with a random number.

					;Load EAX with range for RandomRange call: HI - LO + 1
 00000146  B8 000003E7			mov		eax, RANGE_MAX 
 0000014B  BB 00000064			mov		ebx, RANGE_MIN
 00000150  2B C3			sub		eax, ebx
 00000152  40				inc		eax

 00000153  E8 00000000 E		call	RandomRange
 00000158  83 C0 64			add		eax, RANGE_MIN		;Get generated number into [MIN, MAX]

					;Place random number into next element.
 0000015B  89 07			mov		[edi], eax
 0000015D  83 C7 04			add		edi, TYPE DWORD	;Increment to next element.
 00000160  E2 E4			loop	putNext

 00000162  5D				pop		ebp
 00000163  C2 0008			ret 8

 00000166			FillArray ENDP

				;--------------------------------------------------
 00000166			Display PROC
				;
				; Prints the contents of an array, 10 elements per
				; line.
				;
				; Receives stack parameters (A, N, T):
				;	A: address of the array.
				;   N: size of the array.
				;   T: title of the array.
				;--------------------------------------------------
 00000166  55				push	ebp
 00000167  8B EC			mov		ebp, esp

					;Print array title.
 00000169  8B 55 08			mov		edx, [ebp + 8]					;Load title for printing.
					;mov	edx, OFFSET unsorted
 0000016C  E8 00000000 E		call	WriteString
 00000171  E8 00000000 E		call	CrLf

					;Loop through the array, printing each element.
 00000176  8B 4D 0C			mov		ecx, [ebp + 12]					;Load size of array.
 00000179  8B 75 10			mov		esi, [ebp + 16]					;Load the array.
 0000017C  BF 00000000			mov		edi, 0							;Keep track of numbers printed so far on current line.

 00000181  E8 00000000 E		call	CrLf

 00000186			printNext:
					;Print space between numbers.
 00000186  BA 0000016D R		mov		edx, OFFSET gutter
 0000018B  E8 00000000 E		call	WriteString

 00000190  47				inc		edi
 00000191  8B 06			mov		eax, [esi]
 00000193  E8 00000000 E		call	WriteDec
 00000198  83 C6 04			add		esi, TYPE DWORD				;Advance to next element.

					;Check if we need to print a new line - 10 numbers per line.
 0000019B  33 D2			xor		edx, edx
 0000019D  BB 0000000A			mov		ebx, 10
 000001A2  8B C7			mov		eax, edi
 000001A4  F7 F3			div		ebx
 000001A6  83 FA 00			cmp		edx, 0
 000001A9  75 0A			jne		doLoop						;Less than 10 numbers printed on current line.

 000001AB  E8 00000000 E		call	CrLf						;Divisible by 10. Add a new line.
 000001B0  BF 00000000			mov		edi, 0						;Reset print count for current line.

 000001B5			doLoop:
 000001B5  E2 CF			loop	printNext
 000001B7  E8 00000000 E		call	CrLf
 000001BC  E8 00000000 E		call	CrLf

 000001C1  5D				pop		ebp
 000001C2  C2 000C			ret 12

 000001C5			Display ENDP

				;--------------------------------------------------
 000001C5			SortArray PROC
				; Sorts an array into descending order. Assumes
				; type DWORD. Implemented using selection sort.
				;
				; Receives stack parameters (A, N):
				;	A: address of the array to sort.
				;	N: size of the array.
				;
				;--------------------------------------------------
 000001C5  55				push	ebp
 000001C6  8B EC			mov		ebp, esp
 000001C8  8B 75 0C			mov		esi, [ebp + 12]			;ESI contains address of the array.
 000001CB  8B 4D 08			mov		ecx, [ebp + 8]			;ECX contains size of the array.

					;Load last address into EAX. This will be used for comparisons when iterating.
					;Last address = @ + (N-1 * 4)
 000001CE  8B C1			mov		eax, ecx
 000001D0  BB 00000004			mov		ebx, 4
 000001D5  F7 E3			mul		ebx						
 000001D7  03 C6			add		eax, esi			;EAX contains address of last element of the array.

 000001D9			outer:
					;Check if we're done: i >= (size of array) - 1
 000001D9  8B D8			mov		ebx, eax				;EAX is address of the last element of the array.
 000001DB  83 EB 04			sub		ebx, 4					;Last element - 1
 000001DE  3B F3			cmp		esi, ebx				;ESI = i
 000001E0  7D 24			jge		sortDone

 000001E2  8B DE			mov		ebx, esi				;EBX will hold current max index. Starts as i.
 000001E4  8B FE			mov		edi, esi				
 000001E6  83 C7 04			add		edi, 4					;EDIT = j for the inner loop: j = i + 1

 000001E9			inner:
 000001E9  3B F8			cmp		edi, eax				;Check if j is at the last element of the array.
 000001EB  7D 0D			jge		doneInner				;Done inner loop when j = @ arr[N-1]

 000001ED  8B 0B			mov		ecx, [ebx]				;ECX = value at current max index
 000001EF  3B 0F			cmp		ecx, [edi]				;EDI = @j.

 000001F1  7D 02			jge		innerAgain
 000001F3  8B DF			mov		ebx, edi				;arr[maxIndex] < arr[j]. Update max index = j.

 000001F5			innerAgain:
 000001F5  83 C7 04			add		edi, 4					;Advance j = j + 1.
 000001F8  EB EF			jmp		inner
					

 000001FA			doneInner:
					;Swap elements at arr[i], and arr[maxIndex].
 000001FA  56				push	esi
 000001FB  53				push	ebx						;EBX holds max index.
 000001FC  E8 00000009			call	Swap
 00000201  83 C6 04			add		esi, 4					;Advance i = i+1
 00000204  EB D3			jmp		outer
					;loop	outer

 00000206			sortDone:
 00000206  5D				pop		ebp
 00000207  C2 0008			ret 8

 0000020A			SortArray ENDP


				;--------------------------------------------------
 0000020A			Swap PROC
				;
				; Swaps the values of two memory addresses. Assumes
				; DWORD type.
				;
				; Receives stack parameters (A, B):
				;	A: address of first variable
				;	B: address of second variable
				;	
				;	Returns: [A] = [B], [B] = [A]
				;--------------------------------------------------
 0000020A  50				push	eax
 0000020B  53				push	ebx
 0000020C  55				push	ebp

 0000020D  8B EC			mov		ebp, esp
 0000020F  8B 45 14			mov		eax, [ebp + 20]			;eax contains address of first variable. Add 40 because of pushad.
 00000212  8B 18			mov		ebx, [eax]				;ebx contains VALUE of first variable.

 00000214  8B 4D 10			mov		ecx, [ebp + 16]			;ecx contains address of second variable.
 00000217  8B 11			mov		edx, [ecx]				;edx contains VALUE of second variable.

 00000219  89 10			mov		[eax], edx
 0000021B  89 19			mov		[ecx], ebx

 0000021D  5D				pop		ebp
 0000021E  5B				pop		ebx
 0000021F  58				pop		eax

 00000220  C2 0008			ret 8							;remove two memory addresses from stack.
 00000223			Swap ENDP


				;--------------------------------------------------
 00000223			GetMedian PROC
				;
				; Finds the median value of an array.
				; 
				;
				; Preconditions: The array is sorted.
				; Receives stack parameters (A, N, O):
				;	A: address of the array.
				;	N: size of the array.
				;	O: address of the output variable.
				;
				;--------------------------------------------------

				;If array is odd length, median is arr[(N-1)/2.
				;If array is even length, median is 
				; arr[(N/2)-1] + arr[N/2]

 00000223  55				push	ebp
 00000224  8B EC			mov		ebp, esp

 00000226  8B 75 10			mov		esi, [ebp + 16]			;ESI = @ of array.
 00000229  8B 4D 0C			mov		ecx, [ebp + 12]			;ECX = N.
 0000022C  8B 7D 08			mov		edi, [ebp + 8]			;EDI = output variable.

					;Check if array is even or odd length.
 0000022F  33 D2			xor		edx, edx
 00000231  8B C1			mov		eax, ecx
 00000233  BB 00000002			mov		ebx, 2
 00000238  F7 F3			div		ebx
 0000023A  83 FA 00			cmp		edx, 0
 0000023D  74 1D			je		lenEven

					;Array is odd length. Median index is (N-1)/2
 0000023F  8B C1			mov		eax, ecx				;EAX = N
 00000241  48				dec		eax						;EAX = N - 1
 00000242  33 D2			xor		edx, edx
 00000244  BB 00000002			mov		ebx, 2
 00000249  F7 F3			div		ebx						;EAX = (N-1)/2
 0000024B  BB 00000004			mov		ebx, 4
 00000250  F7 E3			mul		ebx						;EAX = (N-1)/2 * 4, the memory offset of median.

 00000252  8B DE			mov		ebx, esi				;EBX = @ array.
 00000254  03 D8			add		ebx, eax				;EBX = @ of median element.
 00000256  8B 03			mov		eax, [ebx]				;EAX = value of median element.
 00000258  89 07			mov		[edi], eax

 0000025A  EB 39			jmp		return

 0000025C			lenEven:
					;Get first middle number: N/2 - 1
 0000025C  8B C1			mov		eax, ecx				;EAX = N
 0000025E  BB 00000002			mov		ebx, 2					
 00000263  33 D2			xor		edx, edx
 00000265  F7 F3			div		ebx						;EAX = (N/2)

 00000267  48				dec		eax						;EAX = (N/2) - 1, index of first middle number.
 00000268  BB 00000004			mov		ebx, 4
 0000026D  F7 E3			mul		ebx						;EAX = ((N/2)-1) * 4, mem. offset of middle element.

 0000026F  8B DE			mov		ebx, esi				;EBX = @ array.
 00000271  03 D8			add		ebx, eax				;EBX = @ + offset = mem. address of middle element.
 00000273  8B 03			mov		eax, [ebx]
 00000275  50				push	eax						;Save first middle number.

					;Get second middle number: N/2
 00000276  8B C1			mov		eax, ecx				;EAX = N
 00000278  BB 00000002			mov		ebx, 2
 0000027D  33 D2			xor		edx, edx
 0000027F  F7 E3			mul		ebx						;EAX = (N/2)*4 = N * 2

 00000281  8B DE			mov		ebx, esi				;EBX = @ of array.
 00000283  03 D8			add		ebx, eax				;EBX = @ + offset = mem. address of middle element.
 00000285  8B 03			mov		eax, [ebx]				;EAX = value of middle element.

					;Median is the average of the two middle numbers.
 00000287  5B				pop		ebx						;Get first middle number.
 00000288  03 C3			add		eax, ebx
 0000028A  BB 00000002			mov		ebx, 2
 0000028F  33 D2			xor		edx, edx
 00000291  F7 F3			div		ebx						;EAX = median value.

 00000293  89 07			mov		[edi], eax

 00000295			return:
 00000295  5D				pop		ebp
 00000296  C2 000C			ret		12

 00000299			GetMedian ENDP

				;--------------------------------------------------
 00000299			PrintMedian PROC
				;
				;
				;--------------------------------------------------

 00000299			PrintMedian ENDP
				END main
Microsoft (R) Macro Assembler Version 14.12.25831.0	    03/01/18 20:13:02
Program 5     (program5.asm				     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000004A8 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000299 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Display  . . . . . . . . . . . .	P Near	 00000166 _TEXT	Length= 0000005F Public STDCALL
  printNext  . . . . . . . . . .	L Near	 00000186 _TEXT	
  doLoop . . . . . . . . . . . .	L Near	 000001B5 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FillArray  . . . . . . . . . . .	P Near	 0000013D _TEXT	Length= 00000029 Public STDCALL
  putNext  . . . . . . . . . . .	L Near	 00000146 _TEXT	
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetData  . . . . . . . . . . . .	P Near	 000000F3 _TEXT	Length= 00000038 Public STDCALL
  getNum . . . . . . . . . . . .	L Near	 00000103 _TEXT	
  isValid  . . . . . . . . . . .	L Near	 00000120 _TEXT	
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMedian  . . . . . . . . . . .	P Near	 00000223 _TEXT	Length= 00000076 Public STDCALL
  lenEven  . . . . . . . . . . .	L Near	 0000025C _TEXT	
  return . . . . . . . . . . . .	L Near	 00000295 _TEXT	
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Introduction . . . . . . . . . .	P Near	 00000098 _TEXT	Length= 0000005B Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsValidSampleSize  . . . . . . .	P Near	 0000012B _TEXT	Length= 00000012 Public STDCALL
  invalid  . . . . . . . . . . .	L Near	 0000013C _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintMedian  . . . . . . . . . .	P Near	 00000299 _TEXT	Length= 00000000 Public STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SortArray  . . . . . . . . . . .	P Near	 000001C5 _TEXT	Length= 00000045 Public STDCALL
  outer  . . . . . . . . . . . .	L Near	 000001D9 _TEXT	
  inner  . . . . . . . . . . . .	L Near	 000001E9 _TEXT	
  innerAgain . . . . . . . . . .	L Near	 000001F5 _TEXT	
  doneInner  . . . . . . . . . .	L Near	 000001FA _TEXT	
  sortDone . . . . . . . . . . .	L Near	 00000206 _TEXT	
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Swap . . . . . . . . . . . . . .	P Near	 0000020A _TEXT	Length= 00000019 Public STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000098 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_SAMPLE_SIZE  . . . . . . . .	Number	 000000C8h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MIN_SAMPLE_SIZE  . . . . . . . .	Number	 0000000Ah   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RANGE_MAX  . . . . . . . . . . .	Number	 000003E7h   
RANGE_MIN  . . . . . . . . . . .	Number	 00000064h   
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dataErr  . . . . . . . . . . . .	Byte	 00000115 _DATA	
dataPrompt . . . . . . . . . . .	Byte	 000000F4 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
gutter . . . . . . . . . . . . .	Byte	 0000016D _DATA	
instructions1  . . . . . . . . .	Byte	 00000035 _DATA	
instructions2  . . . . . . . . .	Byte	 0000006B _DATA	
instructions3  . . . . . . . . .	Byte	 000000A4 _DATA	
instructions4  . . . . . . . . .	Byte	 000000E2 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
medianStr  . . . . . . . . . . .	Byte	 00000498 _DATA	
myName . . . . . . . . . . . . .	Byte	 00000018 _DATA	
progTitle  . . . . . . . . . . .	Byte	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sampleArr  . . . . . . . . . . .	DWord	 00000174 _DATA	
sampleSize . . . . . . . . . . .	DWord	 00000170 _DATA	
sorted . . . . . . . . . . . . .	Byte	 00000151 _DATA	
theMedian  . . . . . . . . . . .	DWord	 00000494 _DATA	
unsorted . . . . . . . . . . . .	Byte	 00000140 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
